func worker(done chan bool) {
    fmt.Print("working...")
    time.Sleep(time.Second)
    fmt.Println("done")
    done <- true
} 
func main() {
    done := make(chan bool, 1)
    go worker(done)
///Block until we receive a notification from the worker on the channel.  this way we allow the go routine to finish
    <-done
} 



Basic sends and receives on channels are blocking. However, we can use select with a default clause to implement non-blocking sends, receives, and even non-blocking multi-way selects.

To wait for multiple goroutines to finish, we can use a wait group.